#include <SDL.h>
#include <stdio.h>
// con x abris y cerras la tienda

typedef struct {
    int x, y;               // Posici칩n del disparo
    int ancho, alto;        // Tama침o del disparo
    int activo;             // Si el disparo est치 en pantalla
    int direccion_x, direccion_y; // Direcci칩n de movimiento
} Disparo;

#define MAX_DISPAROS 10

int main(int argc, char *argv[]) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("No se pudo inicializar SDL: %s\n", SDL_GetError());
        return 1;
    }

    SDL_Window *ventana = SDL_CreateWindow("Survival",
                                          SDL_WINDOWPOS_CENTERED,
                                          SDL_WINDOWPOS_CENTERED,
                                          1280, 600,
                                          SDL_WINDOW_SHOWN);
    if (!ventana) {
        printf("No se pudo crear la ventana: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(ventana, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        printf("No se pudo crear el renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(ventana);
        SDL_Quit();
        return 1;
    }

    SDL_Rect rectangulo = {0, 100, 1280, 400};
    SDL_Rect jugador = {640, 300, 20, 20};

    Disparo disparos[MAX_DISPAROS];
    
    int i;
    int fila;
    int col;
    
    for ( i = 0; i < MAX_DISPAROS; i++) {
        disparos[i].activo = 0;
    }

    Uint32 ultimo_disparo = 0;
    Uint32 cooldown = 500;
    int running = 1;
    int pausa = 0; // Nueva variable para pausar el juego
    int velocidad = 5;
    int ultima_direccion_x = 1;
    int ultima_direccion_y = 0;
    SDL_Event evento;

    while (running) {
        while (SDL_PollEvent(&evento)) {
            if (evento.type == SDL_QUIT) {
                running = 0;
            } else if (evento.type == SDL_KEYDOWN) {
                if (!pausa) {
                    switch (evento.key.keysym.sym) {
                        case SDLK_w:
                            if (jugador.y - velocidad >= rectangulo.y) {
                                jugador.y -= velocidad;
                                ultima_direccion_y = -1;
                                ultima_direccion_x = 0;
                            }
                            break;
                        case SDLK_s:
                            if (jugador.y + jugador.h + velocidad <= rectangulo.y + rectangulo.h) {
                                jugador.y += velocidad;
                                ultima_direccion_y = 1;
                                ultima_direccion_x = 0;
                            }
                            break;
                        case SDLK_a:
                            if (jugador.x - velocidad >= rectangulo.x) {
                                jugador.x -= velocidad;
                                ultima_direccion_x = -1;
                                ultima_direccion_y = 0;
                            }
                            break;
                        case SDLK_d:
                            if (jugador.x + jugador.w + velocidad <= rectangulo.x + rectangulo.w) {
                                jugador.x += velocidad;
                                ultima_direccion_x = 1;
                                ultima_direccion_y = 0;
                            }
                            break;
                        case SDLK_j: {
                            Uint32 tiempo_actual = SDL_GetTicks();
                            if (tiempo_actual > ultimo_disparo + cooldown) {
                                for ( i = 0; i < MAX_DISPAROS; i++) {
                                    if (!disparos[i].activo) {
                                        disparos[i].activo = 1;
                                        disparos[i].x = jugador.x + jugador.w / 2;
                                        disparos[i].y = jugador.y + jugador.h / 2;
                                        disparos[i].ancho = 5;
                                        disparos[i].alto = 5;
                                        disparos[i].direccion_x = ultima_direccion_x;
                                        disparos[i].direccion_y = ultima_direccion_y;
                                        ultimo_disparo = tiempo_actual;
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
                
                if (evento.key.keysym.sym == SDLK_x) {
                    pausa = !pausa;
                }
            } else if (evento.type == SDL_MOUSEBUTTONDOWN && pausa) {
                int mouse_x, mouse_y;
                SDL_GetMouseState(&mouse_x, &mouse_y);

                int menu_x = 540, menu_y = 200;
                int casilla_tam = 60;

                for ( fila = 0; fila < 3; fila++) {
                    for (col = 0; col < 3; col++) {
                        SDL_Rect casilla = {menu_x + col * casilla_tam, menu_y + fila * casilla_tam, casilla_tam, casilla_tam};
                        if (SDL_PointInRect(&(SDL_Point){mouse_x, mouse_y}, &casilla)) {
                            printf("Casilla seleccionada: [%d, %d]\n", fila, col);
                        }
                    }
                }
            }
        }

        if (!pausa) {
            for ( i = 0; i < MAX_DISPAROS; i++) {
                if (disparos[i].activo) {
                    disparos[i].x += disparos[i].direccion_x * 10;
                    disparos[i].y += disparos[i].direccion_y * 10;

                    if (disparos[i].x < 0 || disparos[i].x > 1280 || disparos[i].y < 0 || disparos[i].y > 600) {
                        disparos[i].activo = 0;
                    }
                }
            }
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
        SDL_RenderClear(renderer);

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderFillRect(renderer, &rectangulo);

        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
        SDL_RenderFillRect(renderer, &jugador);

        if (pausa) {
            int menu_x = 540, menu_y = 200;
            SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
            for ( fila = 0; fila < 3; fila++) {
                for ( col = 0; col < 3; col++) {
                    SDL_Rect casilla = {menu_x + col * 60, menu_y + fila * 60, 60, 60};
                    SDL_RenderDrawRect(renderer, &casilla);
                }
            }
        }

        SDL_RenderPresent(renderer);
        SDL_Delay(16);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(ventana);
    SDL_Quit();

    return 0;
}