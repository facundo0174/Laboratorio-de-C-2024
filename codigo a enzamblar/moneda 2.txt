#include <SDL.h>
#include <SDL_image.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    int x, y;               // Posición del disparo
    int ancho, alto;        // Tamaño del disparo
    int activo;             // Si el disparo está en pantalla
    int direccion_x, direccion_y; // Dirección de movimiento
} Disparo;

typedef struct {
    int x, y;               // Posición del enemigo
    int ancho, alto;        // Tamaño del enemigo
    int activo;             // Si el enemigo está vivo
    int vida;               // Vida del enemigo
} Enemigo;

typedef struct {
    int x, y;               // Posición de la moneda
    int ancho, alto;        // Tamaño de un frame de la moneda
    int activo;             // Si la moneda está en pantalla
    int frame_actual;       // Frame actual de la animación
    Uint32 tiempo_anterior; // Tiempo del último cambio de frame
    Uint32 intervalo_frame; // Tiempo entre frames
} Moneda;

#define MAX_DISPAROS 10
#define MAX_ENEMIGOS 10
#define MAX_MONEDAS 5

int puntuacion = 0;

int i, j;

void generar_moneda(Moneda monedas[MAX_MONEDAS], int x, int y) {
    for (i = 0; i < MAX_MONEDAS; i++) {
        if (!monedas[i].activo) {
            monedas[i].activo = 1;
            monedas[i].x = x;
            monedas[i].y = y;
            monedas[i].ancho = 32;  // Ancho de cada frame en el spritesheet
            monedas[i].alto = 32;   // Alto de cada frame en el spritesheet
            monedas[i].frame_actual = 0;
            monedas[i].tiempo_anterior = SDL_GetTicks();
            monedas[i].intervalo_frame = 100; // Cambiar frame cada 100ms
            break;
        }
    }
}

void disparar(Disparo disparos[MAX_DISPAROS], int x, int y) {
    for (i = 0; i < MAX_DISPAROS; i++) {
        if (!disparos[i].activo) {
            disparos[i].activo = 1;
            disparos[i].x = x;
            disparos[i].y = y;
            disparos[i].ancho = 5;
            disparos[i].alto = 5;
            disparos[i].direccion_x = 1; // Disparo hacia la derecha
            disparos[i].direccion_y = 0;
            break;
        }
    }
}

int main(int argc, char *argv[]) {
    srand(time(NULL)); // Inicializar el generador de números aleatorios

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("No se pudo inicializar SDL: %s\n", SDL_GetError());
        return 1;
    }

    if (!(IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG)) {
        printf("No se pudo inicializar SDL_image: %s\n", IMG_GetError());
        SDL_Quit();
        return 1;
    }

    SDL_Window *ventana = SDL_CreateWindow("Survival",
                                           SDL_WINDOWPOS_CENTERED,
                                           SDL_WINDOWPOS_CENTERED,
                                           1280, 600,
                                           SDL_WINDOW_SHOWN);
    if (!ventana) {
        IMG_Quit();
        SDL_Quit();
        return 1;
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(ventana, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        SDL_DestroyWindow(ventana);
        IMG_Quit();
        SDL_Quit();
        return 1;
    }

    // Cargar el spritesheet de monedas
    SDL_Texture *moneda_spritesheet = IMG_LoadTexture(renderer, "imagenes/moneda.png");
    if (!moneda_spritesheet) {
        printf("No se pudo cargar el spritesheet: %s\n", IMG_GetError());
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(ventana);
        IMG_Quit();
        SDL_Quit();
        return 1;
    }

    SDL_Rect rectangulo = {0, 100, 1280, 400};
    SDL_Rect jugador = {640, 300, 20, 20};

    Disparo disparos[MAX_DISPAROS];
    Enemigo enemigos[MAX_ENEMIGOS];
    Moneda monedas[MAX_MONEDAS];

    for (i = 0; i < MAX_DISPAROS; i++) disparos[i].activo = 0;
    for (i = 0; i < MAX_ENEMIGOS; i++) enemigos[i].activo = 0;
    for (i = 0; i < MAX_MONEDAS; i++) monedas[i].activo = 0;

    Uint32 tiempo_crear_enemigo = SDL_GetTicks();
    Uint32 intervalo_creacion = 2000; // Crear un enemigo cada 2 segundos
    int velocidad_enemigo = 2;

    int running = 1;
    SDL_Event evento;

    while (running) {
        Uint32 tiempo_actual = SDL_GetTicks();

        while (SDL_PollEvent(&evento)) {
            if (evento.type == SDL_QUIT) running = 0;

            // Eventos de teclado
            if (evento.type == SDL_KEYDOWN) {
                switch (evento.key.keysym.sym) {
                    case SDLK_UP:    jugador.y -= 10; break;
                    case SDLK_DOWN:  jugador.y += 10; break;
                    case SDLK_SPACE: disparar(disparos, jugador.x + jugador.w, jugador.y + jugador.h / 2); break;
                }
            }
        }

        // Crear enemigos periódicamente
        if (tiempo_actual - tiempo_crear_enemigo >= intervalo_creacion) {
            tiempo_crear_enemigo = tiempo_actual;
            for (i = 0; i < MAX_ENEMIGOS; i++) {
                if (!enemigos[i].activo) {
                    enemigos[i].activo = 1;
                    enemigos[i].x = 1280;
                    enemigos[i].y = rectangulo.y + rand() % (rectangulo.h - 20);
                    enemigos[i].ancho = 20;
                    enemigos[i].alto = 20;
                    enemigos[i].vida = 1; // Vida inicial del enemigo
                    break;
                }
            }
        }

        // Actualizar posición de disparos
        for (i = 0; i < MAX_DISPAROS; i++) {
            if (disparos[i].activo) {
                disparos[i].x += disparos[i].direccion_x * 10;
                if (disparos[i].x > 1280) disparos[i].activo = 0; // Desactivar disparos fuera de la pantalla

                // Detectar colisión con enemigos
                for (j = 0; j < MAX_ENEMIGOS; j++) {
                    if (enemigos[j].activo &&
                        SDL_HasIntersection(&(SDL_Rect){disparos[i].x, disparos[i].y, disparos[i].ancho, disparos[i].alto},
                                             &(SDL_Rect){enemigos[j].x, enemigos[j].y, enemigos[j].ancho, enemigos[j].alto})) {
                        enemigos[j].activo = 0; // El enemigo muere
                        disparos[i].activo = 0; // Desactivar disparo
                        generar_moneda(monedas, enemigos[j].x, enemigos[j].y); // Dropear moneda
                    }
                }
            }
        }

        // Actualizar posición de enemigos
        for (i = 0; i < MAX_ENEMIGOS; i++) {
            if (enemigos[i].activo) {
                enemigos[i].x -= velocidad_enemigo;
                if (enemigos[i].x < rectangulo.x) enemigos[i].activo = 0;
            }
        }

        // Actualizar animación de monedas
        for (i = 0; i < MAX_MONEDAS; i++) {
            if (monedas[i].activo) {
                if (tiempo_actual - monedas[i].tiempo_anterior >= monedas[i].intervalo_frame) {
                    monedas[i].frame_actual = (monedas[i].frame_actual + 1) % 10; // Cambiar al siguiente frame
                    monedas[i].tiempo_anterior = tiempo_actual;
                }
            }
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
        SDL_RenderClear(renderer);

        // Renderizar jugador
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
        SDL_RenderFillRect(renderer, &jugador);

        // Renderizar enemigos
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        for (i = 0; i < MAX_ENEMIGOS; i++) {
            if (enemigos[i].activo) {
                SDL_Rect rect = {enemigos[i].x, enemigos[i].y, enemigos[i].ancho, enemigos[i].alto};
                SDL_RenderFillRect(renderer, &rect);
            }
        }

        // Renderizar disparos
        SDL_SetRenderDrawColor(renderer, 255, 255, 0, 255);
        for (i = 0; i < MAX_DISPAROS; i++) {
            if (disparos[i].activo) {
                SDL_Rect rect = {disparos[i].x, disparos[i].y, disparos[i].ancho, disparos[i].alto};
                SDL_RenderFillRect(renderer, &rect);
            }
        }

        // Renderizar monedas con animación
        for (i = 0; i < MAX_MONEDAS; i++) {
            if (monedas[i].activo) {
                SDL_Rect src_rect = {monedas[i].frame_actual * monedas[i].ancho, 0, monedas[i].ancho, monedas[i].alto};
                SDL_Rect dest_rect = {monedas[i].x, monedas[i].y, monedas[i].ancho, monedas[i].alto};
                SDL_RenderCopy(renderer, moneda_spritesheet, &src_rect, &dest_rect);
            }
        }

        SDL_RenderPresent(renderer);
        SDL_Delay(16);
    }

    SDL_DestroyTexture(moneda_spritesheet);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(ventana);
    IMG_Quit();
    SDL_Quit();

    return 0;
}